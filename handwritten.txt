!pip install opencv-python tensorflow pytesseract numpy
!apt-get install tesseract-ocr
!apt-get install libtesseract-dev
import cv2
import numpy as np
from scipy import stats

class HandwritingDetectorV3:
    def __init__(self):
        self.min_area = 500
        self.max_area = 50000
        
    def preprocess(self, image):
        # Convert to grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # Enhance contrast
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        enhanced = clahe.apply(gray)
        
        # Binarize
        _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        return binary
        
    def detect_form_fields(self, binary):
        """Detect empty form fields to exclude them"""
        # Detect horizontal and vertical lines (typical in forms)
        horizontal = np.copy(binary)
        vertical = np.copy(binary)
        
        # Specify size on horizontal axis
        cols = horizontal.shape[1]
        horizontal_size = cols // 30
        
        # Specify size on vertical axis
        rows = vertical.shape[0]
        verticalsize = rows // 30
        
        # Create structure elements
        horizontalStructure = cv2.getStructuringElement(cv2.MORPH_RECT, (horizontal_size, 1))
        verticalStructure = cv2.getStructuringElement(cv2.MORPH_RECT, (1, verticalsize))
        
        # Apply morphology operations
        horizontal = cv2.erode(horizontal, horizontalStructure)
        horizontal = cv2.dilate(horizontal, horizontalStructure)
        
        vertical = cv2.erode(vertical, verticalStructure)
        vertical = cv2.dilate(vertical, verticalStructure)
        
        # Combine to get form field mask
        form_fields = cv2.bitwise_or(horizontal, vertical)
        
        return form_fields
        
    def is_handwritten(self, roi):
        """Analyze if region contains handwriting based on statistical features"""
        if roi.size == 0:
            return False
            
        # Calculate statistical features
        pixel_density = np.sum(roi) / roi.size
        if pixel_density < 0.01:  # Almost empty region
            return False
            
        # Calculate stroke consistency
        rows, cols = roi.shape
        row_profiles = np.sum(roi, axis=1) / cols
        col_profiles = np.sum(roi, axis=0) / rows
        
        # Printed text tends to have more regular profiles
        row_variance = np.var(row_profiles)
        col_variance = np.var(col_profiles)
        
        # Handwriting typically has higher variance
        if row_variance < 0.01 or col_variance < 0.01:
            return False
            
        # Check stroke thickness consistency
        contours, _ = cv2.findContours(roi.astype(np.uint8), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if len(contours) == 0:
            return False
            
        thicknesses = []
        for contour in contours:
            area = cv2.contourArea(contour)
            perimeter = cv2.arcLength(contour, True)
            if perimeter > 0:
                thickness = area / perimeter
                thicknesses.append(thickness)
                
        if len(thicknesses) > 0:
            thickness_variance = np.var(thicknesses)
            # Printed text has more consistent stroke thickness
            return thickness_variance > 0.5
            
        return False

    def detect_handwriting(self, image_path):
        # Read image
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError("Could not read image")
            
        # Preprocess
        binary = self.preprocess(image)
        
        # Detect form fields to exclude them
        form_fields = self.detect_form_fields(binary)
        
        # Remove form fields from binary image
        content = cv2.bitwise_and(binary, binary, mask=cv2.bitwise_not(form_fields))
        
        # Find contours
        contours, _ = cv2.findContours(content, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Analyze each region
        handwritten_regions = []
        for contour in contours:
            area = cv2.contourArea(contour)
            if self.min_area < area < self.max_area:
                x, y, w, h = cv2.boundingRect(contour)
                roi = content[y:y+h, x:x+w]
                
                if self.is_handwritten(roi):
                    handwritten_regions.append((x, y, w, h))
        
        return handwritten_regions, image

    def visualize_results(self, image, regions):
        """Draw detected regions on image"""
        result = image.copy()
        for (x, y, w, h) in regions:
            cv2.rectangle(result, (x, y), (x + w, y + h), (0, 255, 0), 2)
        return result

def main():
    detector = HandwritingDetectorV3()
    
    try:
        # Process image
        regions, image = detector.detect_handwriting('1.png')
        
        # Visualize results
        result = detector.visualize_results(image, regions)
        
        # Save result
        cv2.imwrite('resu.jpg', result)
        
        print(f"Found {len(regions)} handwritten regions")
        if len(regions) == 0:
            print("No handwritten content detected - form appears to be empty")
        
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()


########################optimised 
import cv2
import numpy as np
import pytesseract
from PIL import Image

class FormAnalyzer:
    def __init__(self):
        self.min_area = 100
        self.max_area = 15000
        
    def preprocess(self, image):
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        return binary

    def is_handwritten(self, roi):
        if roi.size == 0:
            return False
            
        # Calculate stroke variance (handwriting has higher variance)
        contours, _ = cv2.findContours(roi.astype(np.uint8), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if len(contours) == 0:
            return False
            
        strokes = []
        for contour in contours:
            area = cv2.contourArea(contour)
            perimeter = cv2.arcLength(contour, True)
            if perimeter > 0:
                stroke = area / perimeter
                strokes.append(stroke)
                
        return len(strokes) > 0 and np.var(strokes) > 0.5

    def analyze_form(self, image_path):
        image = cv2.imread(image_path)
        binary = self.preprocess(image)
        
        # Find contours
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        handwritten_text = []
        for contour in contours:
            area = cv2.contourArea(contour)
            if self.min_area < area < self.max_area:
                x, y, w, h = cv2.boundingRect(contour)
                roi = binary[y:y+h, x:x+w]
                
                if self.is_handwritten(roi):
                    # Extract text from handwritten region
                    roi_image = Image.fromarray(cv2.bitwise_not(roi))
                    text = pytesseract.image_to_string(roi_image)
                    if text.strip():
                        handwritten_text.append(text.strip())
        
        return {
            'has_handwriting': len(handwritten_text) > 0,
            'handwritten_content': handwritten_text
        }

def main():
    analyzer = FormAnalyzer()
    result = analyzer.analyze_form('1.png')
    print(f"Has handwriting: {result['has_handwriting']}")
    if result['has_handwriting']:
        print("Handwritten content:")
        for text in result['handwritten_content']:
            print(f"- {text}")
        # cv2.imwrite('resu.jpg', result)

if __name__ == "__main__":
    main()
